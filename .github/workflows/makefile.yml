name: Auto Kernel Builder
on:
  push:
    branches: [main, ksu]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ['main', 'ksu']
      fail-fast: false
    timeout-minutes: 45
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 20G
      ARCH: arm64
      SUBARCH: arm

    steps:
    - name: Checkout ${{ matrix.branch }} branch
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential clang lld libssl-dev libelf-dev \
          flex bison bc ccache curl git gnupg gperf imagemagick liblz4-tool \
          libncurses6 libncurses5-dev libsdl1.2-dev libxml2 libxml2-utils \
          lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev \
          gcc-aarch64-linux-gnu

    - name: Configure ccache
      run: |
        mkdir -p $CCACHE_DIR
        echo "max_size = $CCACHE_MAXSIZE" > $CCACHE_DIR/ccache.conf
        sudo chmod -R 777 $CCACHE_DIR

    - name: Restore ccache
      uses: actions/cache@v4  # ÂçáÁ∫ßÂà∞v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-${{ matrix.branch }}
        restore-keys: |
          kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-

    - name: Build Kernel
      run: |
        # ÁºñËØëÈÖçÁΩÆ
        make -j$(nproc) O=out \
          CC="ccache clang" \
          LD=ld.lld \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          LLVM_IAS=1 \
          KCFLAGS="--target=aarch64-linux-gnu \
                   -Wno-unused-but-set-variable \
                   -Wno-implicit-function-declaration \
                   -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          evergo_defconfig

        # ÂÆûÈôÖÁºñËØë
        make -j$(nproc) O=out \
          CC="ccache clang" \
          LD=ld.lld \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          LLVM_IAS=1 \
          KCFLAGS="--target=aarch64-linux-gnu \
                   -Wno-unused-but-set-variable \
                   -Wno-implicit-function-declaration \
                   -Wno-unused-variable -Wno-unused-function -Wno-unused-label"
        
        # Ê£ÄÊü•ÁºñËØëÁªìÊûú
        if [ ! -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "‚ùå ÁºñËØëÂ§±Ë¥•ÔºöÊú™ÊâæÂà∞ÂÜÖÊ†∏ÈïúÂÉè"
          exit 1
        fi

    - name: Package Kernel
      run: |
        git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        cd AnyKernel3
        zip -r ../AnyKernel3-${{ matrix.branch }}.zip *
        cd ..
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ matrix.branch }}
        path: AnyKernel3-${{ matrix.branch }}.zip

    - name: Generate Release Tag
      id: generate_tag
      run: |
        TAG_SUFFIX=$(date -u +"%Y%m%dT%H%M%SZ")
        echo "TAG_NAME=kernel-${{ matrix.branch }}-$TAG_SUFFIX" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
        echo "‚ÑπÔ∏è Generated tag: $TAG_NAME"

    - name: Create Release
      if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ksu') }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "Kernel Build #${{ github.run_number }} (${{ matrix.branch }})"
        body: |
          ### üöÄ Kernel Build Details
          - **Build Date**: ${{ env.BUILD_DATE }}
          - **Build ID**: ${{ github.run_id }}
          - **Release Tag**: ${{ env.TAG_NAME }}
          - **Branch**: ${{ matrix.branch }}
          
          ### üì≤ Installation
          1. Download `AnyKernel3-${{ matrix.branch }}.zip`
          2. Reboot to recovery (TWRP recommended)
          3. Flash the ZIP
          4. Reboot system
        files: |
          AnyKernel3-${{ matrix.branch }}.zip
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
